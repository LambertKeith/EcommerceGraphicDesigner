/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/health": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Health check endpoint
         * @description Returns the health status of the API
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Service is healthy */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @example healthy */
                            status?: string;
                            /** Format: date-time */
                            timestamp?: string;
                        };
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/version": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * API version information
         * @description Returns version information of the API
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Version information */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @example 1.0.0 */
                            version?: string;
                            /** @example 20231201-1234 */
                            build?: string;
                        };
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/upload": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Upload an image and create a project
         * @description Upload an image file and automatically create a project for it
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "multipart/form-data": {
                        /**
                         * Format: binary
                         * @description The image file to upload (max 10MB)
                         */
                        image: string;
                        /**
                         * @description Name for the project
                         * @default Untitled Project
                         */
                        project_name?: string;
                        /**
                         * @description Owner identifier
                         * @default anonymous
                         */
                        owner_id?: string;
                    };
                };
            };
            responses: {
                /** @description Image uploaded successfully */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiResponse"] & {
                            data?: {
                                /** Format: uuid */
                                image_id?: string;
                                /** Format: uuid */
                                project_id?: string;
                                /** Format: uri */
                                url?: string;
                                /** Format: uri */
                                thumbnail_url?: string;
                                width?: number;
                                height?: number;
                            };
                        };
                    };
                };
                400: components["responses"]["BadRequest"];
                413: components["responses"]["PayloadTooLarge"];
                500: components["responses"]["InternalError"];
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/session": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Create a new editing session
         * @description Create a new session for multi-round image editing
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": {
                        /**
                         * Format: uuid
                         * @description ID of the project to create session for
                         */
                        project_id: string;
                        /** @description Initial context for the session */
                        context?: {
                            [key: string]: unknown;
                        };
                    };
                };
            };
            responses: {
                /** @description Session created successfully */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiResponse"] & {
                            data?: {
                                /** Format: uuid */
                                session_id?: string;
                            };
                        };
                    };
                };
                400: components["responses"]["BadRequest"];
                500: components["responses"]["InternalError"];
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/session/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get session information
         * @description Retrieve details of a specific session
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Session ID */
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Session information */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiResponse"] & {
                            data?: components["schemas"]["Session"];
                        };
                    };
                };
                404: components["responses"]["NotFound"];
                500: components["responses"]["InternalError"];
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/edit": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Create image processing job
         * @description Submit an image for AI processing (optimize, edit, or refine)
         */
        post: {
            parameters: {
                query?: never;
                header?: {
                    /** @description Idempotency key to prevent duplicate processing */
                    "idempotency-key"?: string;
                };
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": {
                        /** Format: uuid */
                        session_id: string;
                        /** Format: uuid */
                        image_id: string;
                        /**
                         * @description Type of processing to perform
                         * @enum {string}
                         */
                        type: "optimize" | "edit" | "refine";
                        /** @description Processing instructions or description */
                        prompt?: string;
                        /** @description Preferred AI model (optional, will use recommended if not specified) */
                        model?: components["schemas"]["AIModelType"];
                    };
                };
            };
            responses: {
                /** @description Job created successfully */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiResponse"] & {
                            data?: {
                                /** Format: uuid */
                                job_id?: string;
                                /** @description The model that will be used for processing */
                                model?: components["schemas"]["AIModelType"];
                            };
                        };
                    };
                };
                400: components["responses"]["BadRequest"];
                404: components["responses"]["NotFound"];
                429: components["responses"]["RateLimited"];
                500: components["responses"]["InternalError"];
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/edit/refine": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Refine an existing variant
         * @description Create a refinement job based on an existing variant
         */
        post: {
            parameters: {
                query?: never;
                header?: {
                    /** @description Idempotency key to prevent duplicate processing */
                    "idempotency-key"?: string;
                };
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": {
                        /** Format: uuid */
                        session_id: string;
                        /** Format: uuid */
                        variant_id: string;
                        /** @description Refinement instructions */
                        instructions: string;
                    };
                };
            };
            responses: {
                /** @description Refinement job created successfully */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiResponse"] & {
                            data?: {
                                /** Format: uuid */
                                job_id?: string;
                            };
                        };
                    };
                };
                400: components["responses"]["BadRequest"];
                404: components["responses"]["NotFound"];
                429: components["responses"]["RateLimited"];
                500: components["responses"]["InternalError"];
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/edit/models": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get available AI models
         * @description Retrieve list of available AI models and their capabilities
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Available models information */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiResponse"] & {
                            data?: {
                                models?: components["schemas"]["AIModelInfo"][];
                                default?: components["schemas"]["AIModelType"];
                                total?: number;
                            };
                        };
                    };
                };
                500: components["responses"]["InternalError"];
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/edit/models/{model}/test": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Test AI model connection
         * @description Test connectivity and availability of a specific AI model
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Model to test */
                    model: components["schemas"]["AIModelType"];
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Connection test results */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiResponse"] & {
                            data?: {
                                model?: components["schemas"]["AIModelType"];
                                connection?: {
                                    success?: boolean;
                                    error?: string | null;
                                };
                            };
                        };
                    };
                };
                400: components["responses"]["BadRequest"];
                500: components["responses"]["InternalError"];
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/job/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get job status
         * @description Retrieve current status and results of a processing job
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Job ID */
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Job status information */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiResponse"] & {
                            data?: components["schemas"]["JobStatus"];
                        };
                    };
                };
                404: components["responses"]["NotFound"];
                500: components["responses"]["InternalError"];
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/job/stream/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Stream job progress
         * @description Real-time streaming of job progress using Server-Sent Events
         */
        get: {
            parameters: {
                query?: never;
                header?: {
                    /** @description Last received event ID for reconnection */
                    "Last-Event-ID"?: string;
                };
                path: {
                    /** @description Job ID */
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Event stream */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/event-stream": string;
                    };
                };
                404: components["responses"]["NotFound"];
                500: components["responses"]["InternalError"];
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/image/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get image information
         * @description Retrieve metadata and URL for a specific image
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Image ID */
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Image information */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiResponse"] & {
                            data?: components["schemas"]["Image"];
                        };
                    };
                };
                404: components["responses"]["NotFound"];
                500: components["responses"]["InternalError"];
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/image/{id}/export": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Export image in specified format
         * @description Export an image with optional format and size conversion
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Image ID */
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": {
                        /**
                         * @description Export format
                         * @default jpg
                         * @enum {string}
                         */
                        format?: "jpg" | "png" | "webp";
                        /** @description Target width (optional) */
                        width?: number;
                        /** @description Target height (optional) */
                        height?: number;
                    };
                };
            };
            responses: {
                /** @description Export successful */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiResponse"] & {
                            data?: {
                                /**
                                 * Format: uri
                                 * @description URL to download the exported image
                                 */
                                download_url?: string;
                                /**
                                 * Format: date-time
                                 * @description When the download link expires
                                 */
                                expires_at?: string;
                            };
                        };
                    };
                };
                404: components["responses"]["NotFound"];
                500: components["responses"]["InternalError"];
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        ApiResponse: {
            /** @description Whether the request was successful */
            success: boolean;
            /** @description Response data (present on success) */
            data?: Record<string, never> | null;
            /** @description Error message (present on failure) */
            error?: string | null;
        };
        /**
         * @description Available AI models
         * @enum {string}
         */
        AIModelType: "gemini" | "chatgpt" | "sora";
        AIModelInfo: {
            id?: components["schemas"]["AIModelType"];
            /** @description Human-readable model name */
            name?: string;
            /** @description Model description */
            description?: string;
            /** @description Supported operations */
            capabilities?: ("optimize" | "edit" | "refine" | "background_replace")[];
            /**
             * @description Model quality tier
             * @enum {string}
             */
            tier?: "premium" | "creative" | "standard";
            /** @description Whether the model is currently available */
            available?: boolean;
        };
        Session: {
            /** Format: uuid */
            id?: string;
            /** Format: uuid */
            project_id?: string;
            /** @description Session context and history */
            context_json?: {
                [key: string]: unknown;
            };
            /** Format: date-time */
            created_at?: string;
            /** Format: date-time */
            updated_at?: string;
        };
        Image: {
            /** Format: uuid */
            id?: string;
            /** Format: uuid */
            project_id?: string;
            /** @description Storage path of the image */
            path?: string;
            width?: number;
            height?: number;
            /** @description Image metadata */
            metadata?: {
                [key: string]: unknown;
            };
            /**
             * Format: uri
             * @description Public URL to access the image
             */
            url?: string;
            /** Format: date-time */
            created_at?: string;
        };
        Variant: {
            /** Format: uuid */
            id?: string;
            /** Format: uuid */
            job_id?: string;
            /** Format: uuid */
            image_id?: string;
            /** @description Quality score of the variant */
            score?: number;
            /** @description Path to thumbnail image */
            thumbnail_path?: string;
            /** @description Variant metadata including AI model used */
            metadata?: {
                [key: string]: unknown;
            };
        };
        JobStatus: {
            /** Format: uuid */
            id?: string;
            /**
             * @description Current job status
             * @enum {string}
             */
            status?: "pending" | "queued" | "running" | "done" | "error" | "failed";
            /** @description Processing progress percentage */
            progress?: number;
            /** @description Generated variants (available when status is 'done') */
            result_variants?: components["schemas"]["Variant"][];
            /** @description Error message if job failed */
            error_msg?: string | null;
            /** @description AI model used for processing */
            model_used?: components["schemas"]["AIModelType"];
            /** @description Number of processing attempts */
            attempts?: number;
            /** @description Last error encountered during processing */
            last_error?: string | null;
        };
        /**
         * @description Standardized error codes
         * @enum {string}
         */
        ErrorCode: "E_AI_MODEL_UNAVAILABLE" | "E_INPUT_TOO_LARGE" | "E_PROMPT_INVALID" | "E_STORAGE_IO" | "E_INVALID_FILE_TYPE" | "E_RATE_LIMITED" | "E_SESSION_NOT_FOUND" | "E_IMAGE_NOT_FOUND" | "E_JOB_NOT_FOUND" | "E_PROCESSING_FAILED";
    };
    responses: {
        /** @description Bad request - invalid input parameters */
        BadRequest: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["ApiResponse"] & {
                    /** @example false */
                    success?: boolean;
                    /** @example Invalid request parameters */
                    error?: string;
                };
            };
        };
        /** @description Resource not found */
        NotFound: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["ApiResponse"] & {
                    /** @example false */
                    success?: boolean;
                    /** @example Resource not found */
                    error?: string;
                };
            };
        };
        /** @description Too many requests - rate limit exceeded */
        RateLimited: {
            headers: {
                /** @description Number of seconds to wait before retrying */
                "Retry-After"?: number;
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["ApiResponse"] & {
                    /** @example false */
                    success?: boolean;
                    /** @example Rate limit exceeded. Please retry after specified time. */
                    error?: string;
                };
            };
        };
        /** @description Uploaded file is too large */
        PayloadTooLarge: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["ApiResponse"] & {
                    /** @example false */
                    success?: boolean;
                    /** @example File size exceeds maximum limit of 10MB */
                    error?: string;
                };
            };
        };
        /** @description Internal server error */
        InternalError: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["ApiResponse"] & {
                    /** @example false */
                    success?: boolean;
                    /** @example Internal server error */
                    error?: string;
                };
            };
        };
    };
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export type operations = Record<string, never>;
