import fs from 'fs/promises';
import { fileStorage } from './fileStorage';
import { promptTemplateService, PromptContext } from './promptTemplate';
import { 
  AIService, 
  ProcessImageOptions, 
  ProcessImageResult, 
  AIModelConfig, 
  AIModelInfo, 
  AIModelType 
} from './aiService';

export interface ChatGPTResponse {
  id: string;
  object: string;
  created: number;
  model: string;
  choices: Array<{
    index: number;
    message: {
      role: string;
      content: string;
    };
    finish_reason: string;
  }>;
  usage?: {
    prompt_tokens: number;
    completion_tokens: number;
    total_tokens: number;
  };
  error?: {
    message: string;
    type: string;
    code: string;
  };
}

export interface PromptTemplate {
  base: string;
  params?: Record<string, any>;
}

export class ChatGPTService extends AIService {
  private rateLimitDelay: number = 10000;

  constructor() {
    const config: AIModelConfig = {
      name: 'ChatGPT Vision',
      apiKey: process.env.GOOGLE_API_KEY || '', // Using same API key for now
      apiUrl: process.env.GEMINI_API_URL || 'https://api.laozhang.ai/v1/chat/completions',
      model: process.env.CHATGPT_MODEL || 'gpt-4o-image-vip',
      maxRetries: 3,
      retryDelay: 3000, // Slightly longer delay for ChatGPT
      timeout: 180000 // 3 minutes timeout for ChatGPT (higher quality processing)
    };
    
    super(config);
  }

  async processImage(imagePath: string, options: ProcessImageOptions): Promise<ProcessImageResult> {
    try {
      const fullImagePath = fileStorage.getFullPath(imagePath);
      const imageBuffer = await fs.readFile(fullImagePath);
      
      const { base64Data, mimeType } = await this.prepareImageData(imageBuffer, imagePath);
      
      const promptTemplates = this.buildPromptTemplates(options);
      
      const variants: Array<{
        imageBuffer: Buffer;
        score: number;
        metadata: Record<string, any>;
      }> = [];

      // ChatGPT processes variants sequentially for better quality control
      for (let i = 0; i < promptTemplates.length; i++) {
        const template = promptTemplates[i];
        try {
          const processedImage = await this.callChatGPTAPI(base64Data, mimeType, template.base);
          
          if (processedImage) {
            variants.push({
              imageBuffer: processedImage,
              score: this.calculateVariantScore(template, i, !!options.prompt, !!options.context?.previous_edits?.length),
              metadata: {
                prompt: template.base,
                type: options.type,
                variation: i + 1,
                processing_method: 'chatgpt_4o_vision',
                model: this.config.model
              }
            });
          }
        } catch (error) {
          console.error(`ChatGPT variant ${i + 1} generation failed:`, error);
        }
      }

      if (variants.length === 0) {
        throw new Error('No variants were successfully generated by ChatGPT');
      }

      return {
        success: true,
        variants
      };
      
    } catch (error) {
      console.error('ChatGPT processing error:', error);
      return {
        success: false,
        variants: [],
        error: error instanceof Error ? error.message : 'Unknown error occurred'
      };
    }
  }

  private async prepareImageData(imageBuffer: Buffer, imagePath: string): Promise<{
    base64Data: string;
    mimeType: string;
  }> {
    // Size validation - ChatGPT has different limits
    const maxSize = 20 * 1024 * 1024; // 20MB limit for ChatGPT
    
    if (imageBuffer.length > maxSize) {
      throw new Error(`Image too large: ${(imageBuffer.length / 1024 / 1024).toFixed(2)}MB. Maximum size is 20MB for ChatGPT.`);
    }

    // Format validation
    const mimeType = this.getMimeTypeFromPath(imagePath);
    const supportedTypes = ['image/jpeg', 'image/png', 'image/webp', 'image/gif'];
    
    if (!supportedTypes.includes(mimeType)) {
      throw new Error(`Unsupported image format: ${mimeType}. Supported formats: ${supportedTypes.join(', ')}`);
    }

    // Optional: Resize if image is too large (dimensions)
    let processedBuffer = imageBuffer;
    try {
      const sharp = require('sharp');
      const metadata = await sharp(imageBuffer).metadata();
      
      // ChatGPT can handle larger images, but we'll resize if over 8K
      const maxDimension = 8192;
      if (metadata.width && metadata.height && 
          (metadata.width > maxDimension || metadata.height > maxDimension)) {
        console.log(`Resizing large image for ChatGPT from ${metadata.width}x${metadata.height}`);
        
        processedBuffer = await sharp(imageBuffer)
          .resize(maxDimension, maxDimension, {
            fit: 'inside',
            withoutEnlargement: true
          })
          .toBuffer();
      }
    } catch (error) {
      console.warn('Could not process image dimensions, using original:', error);
    }

    // Convert to base64
    const base64Data = processedBuffer.toString('base64');
    
    console.log(`Image prepared for ChatGPT: ${mimeType}, size: ${(processedBuffer.length / 1024).toFixed(1)}KB`);
    
    return { base64Data, mimeType };
  }

  private buildPromptTemplates(options: ProcessImageOptions): PromptTemplate[] {
    const context: PromptContext = {
      previousEdits: options.context?.previous_edits || [],
      productCategory: options.context?.product_category,
      desiredStyle: options.context?.desired_style,
      userPreferences: options.context?.user_preferences
    };

    // ChatGPT-specific prompts with more detailed instructions
    let prompts = promptTemplateService.generatePromptsForProcessing(
      options.type,
      options.prompt,
      context
    );

    // Enhance prompts for ChatGPT's capabilities
    prompts = prompts.map(prompt => 
      `As a professional image editor with expertise in e-commerce photography, ${prompt} 
      Focus on high-quality results with attention to detail, proper lighting, and professional presentation.
      Ensure the output maintains excellent image quality and meets commercial standards.`
    );

    return prompts.map((prompt, index) => ({
      base: prompt,
      params: {
        type: options.type,
        variation: index + 1,
        hasUserPrompt: !!options.prompt,
        contextual: !!context.previousEdits?.length,
        model: 'chatgpt'
      }
    }));
  }

  private async callChatGPTAPI(base64Data: string, mimeType: string, prompt: string): Promise<Buffer | null> {
    const headers = {
      'Content-Type': 'application/json',
      'Authorization': `Bearer ${this.config.apiKey}`,
    };

    const payload = {
      model: this.config.model,
      max_tokens: 4000,
      messages: [
        {
          role: "system",
          content: "You are a professional image editor specialized in e-commerce product photography. Generate high-quality, commercial-grade image edits with attention to detail, proper lighting, and professional presentation standards."
        },
        {
          role: "user",
          content: [
            {
              type: "text",
              text: prompt
            },
            {
              type: "image_url",
              image_url: {
                url: `data:${mimeType};base64,${base64Data}`,
                detail: "high"
              }
            }
          ]
        }
      ]
    };

    for (let attempt = 1; attempt <= this.maxRetries; attempt++) {
      try {
        console.log(`Calling ChatGPT API (attempt ${attempt}/${this.maxRetries})`);
        
        const controller = new AbortController();
        const timeoutId = setTimeout(() => controller.abort(), this.timeout);

        const response = await fetch(this.config.apiUrl, {
          method: 'POST',
          headers,
          body: JSON.stringify(payload),
          signal: controller.signal
        });

        clearTimeout(timeoutId);

        if (!response.ok) {
          const errorText = await response.text();
          const error = this.parseAPIError(response.status, errorText);
          
          // Handle different error types
          if (response.status === 429) {
            console.log(`Rate limited, waiting ${this.rateLimitDelay}ms before retry`);
            await this.sleep(this.rateLimitDelay);
            continue;
          } else if (response.status >= 500) {
            console.log(`Server error (${response.status}), retrying...`);
            throw new Error(error.message);
          } else if (response.status === 401 || response.status === 403) {
            throw new Error(`Authentication error: ${error.message}. Please check your API key.`);
          } else {
            throw new Error(error.message);
          }
        }

        const result = await response.json() as ChatGPTResponse;
        
        if (result.error) {
          throw new Error(`ChatGPT API Error: ${result.error.message} (${result.error.type})`);
        }

        const messageContent = result.choices?.[0]?.message?.content;
        
        if (messageContent) {
          // Extract base64 image data from markdown format: ![image](data:image/png;base64,...)
          const base64Match = messageContent.match(/data:image\/[^;]+;base64,([^)]+)/);
          if (base64Match && base64Match[1]) {
            return Buffer.from(base64Match[1], 'base64');
          } else {
            throw new Error('No image data found in ChatGPT response. The model may not have generated an image for this request.');
          }
        } else {
          throw new Error('No message content received from ChatGPT API.');
        }

      } catch (error) {
        console.error(`ChatGPT API call attempt ${attempt} failed:`, error);
        
        if (attempt === this.maxRetries) {
          if (error instanceof Error && error.message.includes('Authentication error')) {
            throw error; // Don't retry auth errors
          }
          throw new Error(`ChatGPT API failed after ${this.maxRetries} attempts: ${error instanceof Error ? error.message : 'Unknown error'}`);
        }
        
        // Progressive backoff with longer delays for ChatGPT
        const delay = this.retryDelay * Math.pow(2, attempt - 1);
        console.log(`Waiting ${delay}ms before retry...`);
        await this.sleep(delay);
      }
    }

    return null;
  }

  getModelInfo(): AIModelInfo {
    return {
      id: 'chatgpt' as AIModelType,
      name: 'ChatGPT Vision',
      description: '高质量图像处理模型，适合复杂编辑和专业级图像处理',
      capabilities: ['高质量编辑', '复杂图像处理', '专业修图', '细节优化'],
      speed: 'medium',
      quality: 'premium',
      recommended: ['专业产品摄影', '复杂背景处理', '高端修图', '品牌级编辑']
    };
  }

  async testConnection(): Promise<{ success: boolean; error?: string }> {
    try {
      const headers = {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${this.config.apiKey}`,
      };

      const payload = {
        model: this.config.model,
        max_tokens: 50,
        messages: [
          {
            role: "user",
            content: "Hello, are you working properly? Please respond briefly."
          }
        ]
      };

      console.log('Testing ChatGPT API connection...');
      const controller = new AbortController();
      const timeoutId = setTimeout(() => controller.abort(), 15000);

      const response = await fetch(this.config.apiUrl, {
        method: 'POST',
        headers,
        body: JSON.stringify(payload),
        signal: controller.signal
      });

      clearTimeout(timeoutId);

      if (!response.ok) {
        const errorText = await response.text();
        const error = this.parseAPIError(response.status, errorText);
        return {
          success: false,
          error: `ChatGPT connection test failed: ${error.message}`
        };
      }

      const result = await response.json() as any;
      
      if (result.error) {
        return {
          success: false,
          error: `ChatGPT API Error: ${result.error.message}`
        };
      }

      console.log('ChatGPT API connection test successful');
      return { success: true };

    } catch (error) {
      console.error('ChatGPT connection test failed:', error);
      return {
        success: false,
        error: error instanceof Error ? error.message : 'Connection test failed with unknown error'
      };
    }
  }
}

export const chatgptService = new ChatGPTService();